// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module design_1_v_tpg_0_0_entry_proc (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        field_id_val11,
        field_id_val11_c_din,
        field_id_val11_c_num_data_valid,
        field_id_val11_c_fifo_cap,
        field_id_val11_c_full_n,
        field_id_val11_c_write,
        fid_in_val12,
        fid_in_val12_c_din,
        fid_in_val12_c_num_data_valid,
        fid_in_val12_c_fifo_cap,
        fid_in_val12_c_full_n,
        fid_in_val12_c_write,
        passthruStartX_val13,
        passthruStartX_val13_c_din,
        passthruStartX_val13_c_num_data_valid,
        passthruStartX_val13_c_fifo_cap,
        passthruStartX_val13_c_full_n,
        passthruStartX_val13_c_write,
        passthruStartY_val14,
        passthruStartY_val14_c_din,
        passthruStartY_val14_c_num_data_valid,
        passthruStartY_val14_c_fifo_cap,
        passthruStartY_val14_c_full_n,
        passthruStartY_val14_c_write,
        passthruEndX_val15,
        passthruEndX_val15_c_din,
        passthruEndX_val15_c_num_data_valid,
        passthruEndX_val15_c_fifo_cap,
        passthruEndX_val15_c_full_n,
        passthruEndX_val15_c_write,
        passthruEndY_val16,
        passthruEndY_val16_c_din,
        passthruEndY_val16_c_num_data_valid,
        passthruEndY_val16_c_fifo_cap,
        passthruEndY_val16_c_full_n,
        passthruEndY_val16_c_write,
        bckgndId_val19,
        bckgndId_val19_c_din,
        bckgndId_val19_c_num_data_valid,
        bckgndId_val19_c_fifo_cap,
        bckgndId_val19_c_full_n,
        bckgndId_val19_c_write,
        ovrlayId_val20,
        ovrlayId_val20_c_din,
        ovrlayId_val20_c_num_data_valid,
        ovrlayId_val20_c_fifo_cap,
        ovrlayId_val20_c_full_n,
        ovrlayId_val20_c_write,
        maskId_val21,
        maskId_val21_c_din,
        maskId_val21_c_num_data_valid,
        maskId_val21_c_fifo_cap,
        maskId_val21_c_full_n,
        maskId_val21_c_write,
        motionSpeed_val23,
        motionSpeed_val23_c18_din,
        motionSpeed_val23_c18_num_data_valid,
        motionSpeed_val23_c18_fifo_cap,
        motionSpeed_val23_c18_full_n,
        motionSpeed_val23_c18_write,
        crossHairX_val28,
        crossHairX_val28_c_din,
        crossHairX_val28_c_num_data_valid,
        crossHairX_val28_c_fifo_cap,
        crossHairX_val28_c_full_n,
        crossHairX_val28_c_write,
        crossHairY_val29,
        crossHairY_val29_c_din,
        crossHairY_val29_c_num_data_valid,
        crossHairY_val29_c_fifo_cap,
        crossHairY_val29_c_full_n,
        crossHairY_val29_c_write,
        ZplateHorContStart_val30,
        ZplateHorContStart_val30_c_din,
        ZplateHorContStart_val30_c_num_data_valid,
        ZplateHorContStart_val30_c_fifo_cap,
        ZplateHorContStart_val30_c_full_n,
        ZplateHorContStart_val30_c_write,
        ZplateHorContDelta_val31,
        ZplateHorContDelta_val31_c_din,
        ZplateHorContDelta_val31_c_num_data_valid,
        ZplateHorContDelta_val31_c_fifo_cap,
        ZplateHorContDelta_val31_c_full_n,
        ZplateHorContDelta_val31_c_write,
        ZplateVerContStart_val32,
        ZplateVerContStart_val32_c_din,
        ZplateVerContStart_val32_c_num_data_valid,
        ZplateVerContStart_val32_c_fifo_cap,
        ZplateVerContStart_val32_c_full_n,
        ZplateVerContStart_val32_c_write,
        ZplateVerContDelta_val33,
        ZplateVerContDelta_val33_c_din,
        ZplateVerContDelta_val33_c_num_data_valid,
        ZplateVerContDelta_val33_c_fifo_cap,
        ZplateVerContDelta_val33_c_full_n,
        ZplateVerContDelta_val33_c_write,
        boxSize_val34,
        boxSize_val34_c_din,
        boxSize_val34_c_num_data_valid,
        boxSize_val34_c_fifo_cap,
        boxSize_val34_c_full_n,
        boxSize_val34_c_write,
        boxColorR_val35,
        boxColorR_val35_c_din,
        boxColorR_val35_c_num_data_valid,
        boxColorR_val35_c_fifo_cap,
        boxColorR_val35_c_full_n,
        boxColorR_val35_c_write,
        boxColorG_val36,
        boxColorG_val36_c_din,
        boxColorG_val36_c_num_data_valid,
        boxColorG_val36_c_fifo_cap,
        boxColorG_val36_c_full_n,
        boxColorG_val36_c_write,
        boxColorB_val37,
        boxColorB_val37_c_din,
        boxColorB_val37_c_num_data_valid,
        boxColorB_val37_c_fifo_cap,
        boxColorB_val37_c_full_n,
        boxColorB_val37_c_write,
        dpDynamicRange_val38,
        dpDynamicRange_val38_c_din,
        dpDynamicRange_val38_c_num_data_valid,
        dpDynamicRange_val38_c_fifo_cap,
        dpDynamicRange_val38_c_full_n,
        dpDynamicRange_val38_c_write,
        dpYUVCoef_val39,
        dpYUVCoef_val39_c_din,
        dpYUVCoef_val39_c_num_data_valid,
        dpYUVCoef_val39_c_fifo_cap,
        dpYUVCoef_val39_c_full_n,
        dpYUVCoef_val39_c_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [15:0] field_id_val11;
output  [15:0] field_id_val11_c_din;
input  [3:0] field_id_val11_c_num_data_valid;
input  [3:0] field_id_val11_c_fifo_cap;
input   field_id_val11_c_full_n;
output   field_id_val11_c_write;
input  [0:0] fid_in_val12;
output  [0:0] fid_in_val12_c_din;
input  [3:0] fid_in_val12_c_num_data_valid;
input  [3:0] fid_in_val12_c_fifo_cap;
input   fid_in_val12_c_full_n;
output   fid_in_val12_c_write;
input  [15:0] passthruStartX_val13;
output  [15:0] passthruStartX_val13_c_din;
input  [2:0] passthruStartX_val13_c_num_data_valid;
input  [2:0] passthruStartX_val13_c_fifo_cap;
input   passthruStartX_val13_c_full_n;
output   passthruStartX_val13_c_write;
input  [15:0] passthruStartY_val14;
output  [15:0] passthruStartY_val14_c_din;
input  [2:0] passthruStartY_val14_c_num_data_valid;
input  [2:0] passthruStartY_val14_c_fifo_cap;
input   passthruStartY_val14_c_full_n;
output   passthruStartY_val14_c_write;
input  [15:0] passthruEndX_val15;
output  [15:0] passthruEndX_val15_c_din;
input  [2:0] passthruEndX_val15_c_num_data_valid;
input  [2:0] passthruEndX_val15_c_fifo_cap;
input   passthruEndX_val15_c_full_n;
output   passthruEndX_val15_c_write;
input  [15:0] passthruEndY_val16;
output  [15:0] passthruEndY_val16_c_din;
input  [2:0] passthruEndY_val16_c_num_data_valid;
input  [2:0] passthruEndY_val16_c_fifo_cap;
input   passthruEndY_val16_c_full_n;
output   passthruEndY_val16_c_write;
input  [7:0] bckgndId_val19;
output  [7:0] bckgndId_val19_c_din;
input  [2:0] bckgndId_val19_c_num_data_valid;
input  [2:0] bckgndId_val19_c_fifo_cap;
input   bckgndId_val19_c_full_n;
output   bckgndId_val19_c_write;
input  [7:0] ovrlayId_val20;
output  [7:0] ovrlayId_val20_c_din;
input  [2:0] ovrlayId_val20_c_num_data_valid;
input  [2:0] ovrlayId_val20_c_fifo_cap;
input   ovrlayId_val20_c_full_n;
output   ovrlayId_val20_c_write;
input  [7:0] maskId_val21;
output  [7:0] maskId_val21_c_din;
input  [2:0] maskId_val21_c_num_data_valid;
input  [2:0] maskId_val21_c_fifo_cap;
input   maskId_val21_c_full_n;
output   maskId_val21_c_write;
input  [7:0] motionSpeed_val23;
output  [7:0] motionSpeed_val23_c18_din;
input  [2:0] motionSpeed_val23_c18_num_data_valid;
input  [2:0] motionSpeed_val23_c18_fifo_cap;
input   motionSpeed_val23_c18_full_n;
output   motionSpeed_val23_c18_write;
input  [15:0] crossHairX_val28;
output  [15:0] crossHairX_val28_c_din;
input  [2:0] crossHairX_val28_c_num_data_valid;
input  [2:0] crossHairX_val28_c_fifo_cap;
input   crossHairX_val28_c_full_n;
output   crossHairX_val28_c_write;
input  [15:0] crossHairY_val29;
output  [15:0] crossHairY_val29_c_din;
input  [2:0] crossHairY_val29_c_num_data_valid;
input  [2:0] crossHairY_val29_c_fifo_cap;
input   crossHairY_val29_c_full_n;
output   crossHairY_val29_c_write;
input  [15:0] ZplateHorContStart_val30;
output  [15:0] ZplateHorContStart_val30_c_din;
input  [2:0] ZplateHorContStart_val30_c_num_data_valid;
input  [2:0] ZplateHorContStart_val30_c_fifo_cap;
input   ZplateHorContStart_val30_c_full_n;
output   ZplateHorContStart_val30_c_write;
input  [15:0] ZplateHorContDelta_val31;
output  [15:0] ZplateHorContDelta_val31_c_din;
input  [2:0] ZplateHorContDelta_val31_c_num_data_valid;
input  [2:0] ZplateHorContDelta_val31_c_fifo_cap;
input   ZplateHorContDelta_val31_c_full_n;
output   ZplateHorContDelta_val31_c_write;
input  [15:0] ZplateVerContStart_val32;
output  [15:0] ZplateVerContStart_val32_c_din;
input  [2:0] ZplateVerContStart_val32_c_num_data_valid;
input  [2:0] ZplateVerContStart_val32_c_fifo_cap;
input   ZplateVerContStart_val32_c_full_n;
output   ZplateVerContStart_val32_c_write;
input  [15:0] ZplateVerContDelta_val33;
output  [15:0] ZplateVerContDelta_val33_c_din;
input  [2:0] ZplateVerContDelta_val33_c_num_data_valid;
input  [2:0] ZplateVerContDelta_val33_c_fifo_cap;
input   ZplateVerContDelta_val33_c_full_n;
output   ZplateVerContDelta_val33_c_write;
input  [15:0] boxSize_val34;
output  [15:0] boxSize_val34_c_din;
input  [2:0] boxSize_val34_c_num_data_valid;
input  [2:0] boxSize_val34_c_fifo_cap;
input   boxSize_val34_c_full_n;
output   boxSize_val34_c_write;
input  [7:0] boxColorR_val35;
output  [7:0] boxColorR_val35_c_din;
input  [2:0] boxColorR_val35_c_num_data_valid;
input  [2:0] boxColorR_val35_c_fifo_cap;
input   boxColorR_val35_c_full_n;
output   boxColorR_val35_c_write;
input  [7:0] boxColorG_val36;
output  [7:0] boxColorG_val36_c_din;
input  [2:0] boxColorG_val36_c_num_data_valid;
input  [2:0] boxColorG_val36_c_fifo_cap;
input   boxColorG_val36_c_full_n;
output   boxColorG_val36_c_write;
input  [7:0] boxColorB_val37;
output  [7:0] boxColorB_val37_c_din;
input  [2:0] boxColorB_val37_c_num_data_valid;
input  [2:0] boxColorB_val37_c_fifo_cap;
input   boxColorB_val37_c_full_n;
output   boxColorB_val37_c_write;
input  [7:0] dpDynamicRange_val38;
output  [7:0] dpDynamicRange_val38_c_din;
input  [2:0] dpDynamicRange_val38_c_num_data_valid;
input  [2:0] dpDynamicRange_val38_c_fifo_cap;
input   dpDynamicRange_val38_c_full_n;
output   dpDynamicRange_val38_c_write;
input  [7:0] dpYUVCoef_val39;
output  [7:0] dpYUVCoef_val39_c_din;
input  [2:0] dpYUVCoef_val39_c_num_data_valid;
input  [2:0] dpYUVCoef_val39_c_fifo_cap;
input   dpYUVCoef_val39_c_full_n;
output   dpYUVCoef_val39_c_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg field_id_val11_c_write;
reg fid_in_val12_c_write;
reg passthruStartX_val13_c_write;
reg passthruStartY_val14_c_write;
reg passthruEndX_val15_c_write;
reg passthruEndY_val16_c_write;
reg bckgndId_val19_c_write;
reg ovrlayId_val20_c_write;
reg maskId_val21_c_write;
reg motionSpeed_val23_c18_write;
reg crossHairX_val28_c_write;
reg crossHairY_val29_c_write;
reg ZplateHorContStart_val30_c_write;
reg ZplateHorContDelta_val31_c_write;
reg ZplateVerContStart_val32_c_write;
reg ZplateVerContDelta_val33_c_write;
reg boxSize_val34_c_write;
reg boxColorR_val35_c_write;
reg boxColorG_val36_c_write;
reg boxColorB_val37_c_write;
reg dpDynamicRange_val38_c_write;
reg dpYUVCoef_val39_c_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    field_id_val11_c_blk_n;
reg    fid_in_val12_c_blk_n;
reg    passthruStartX_val13_c_blk_n;
reg    passthruStartY_val14_c_blk_n;
reg    passthruEndX_val15_c_blk_n;
reg    passthruEndY_val16_c_blk_n;
reg    bckgndId_val19_c_blk_n;
reg    ovrlayId_val20_c_blk_n;
reg    maskId_val21_c_blk_n;
reg    motionSpeed_val23_c18_blk_n;
reg    crossHairX_val28_c_blk_n;
reg    crossHairY_val29_c_blk_n;
reg    ZplateHorContStart_val30_c_blk_n;
reg    ZplateHorContDelta_val31_c_blk_n;
reg    ZplateVerContStart_val32_c_blk_n;
reg    ZplateVerContDelta_val33_c_blk_n;
reg    boxSize_val34_c_blk_n;
reg    boxColorR_val35_c_blk_n;
reg    boxColorG_val36_c_blk_n;
reg    boxColorB_val37_c_blk_n;
reg    dpDynamicRange_val38_c_blk_n;
reg    dpYUVCoef_val39_c_blk_n;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateHorContDelta_val31_c_blk_n = ZplateHorContDelta_val31_c_full_n;
    end else begin
        ZplateHorContDelta_val31_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateHorContDelta_val31_c_write = 1'b1;
    end else begin
        ZplateHorContDelta_val31_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateHorContStart_val30_c_blk_n = ZplateHorContStart_val30_c_full_n;
    end else begin
        ZplateHorContStart_val30_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateHorContStart_val30_c_write = 1'b1;
    end else begin
        ZplateHorContStart_val30_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateVerContDelta_val33_c_blk_n = ZplateVerContDelta_val33_c_full_n;
    end else begin
        ZplateVerContDelta_val33_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateVerContDelta_val33_c_write = 1'b1;
    end else begin
        ZplateVerContDelta_val33_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateVerContStart_val32_c_blk_n = ZplateVerContStart_val32_c_full_n;
    end else begin
        ZplateVerContStart_val32_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ZplateVerContStart_val32_c_write = 1'b1;
    end else begin
        ZplateVerContStart_val32_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bckgndId_val19_c_blk_n = bckgndId_val19_c_full_n;
    end else begin
        bckgndId_val19_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        bckgndId_val19_c_write = 1'b1;
    end else begin
        bckgndId_val19_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        boxColorB_val37_c_blk_n = boxColorB_val37_c_full_n;
    end else begin
        boxColorB_val37_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        boxColorB_val37_c_write = 1'b1;
    end else begin
        boxColorB_val37_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        boxColorG_val36_c_blk_n = boxColorG_val36_c_full_n;
    end else begin
        boxColorG_val36_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        boxColorG_val36_c_write = 1'b1;
    end else begin
        boxColorG_val36_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        boxColorR_val35_c_blk_n = boxColorR_val35_c_full_n;
    end else begin
        boxColorR_val35_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        boxColorR_val35_c_write = 1'b1;
    end else begin
        boxColorR_val35_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        boxSize_val34_c_blk_n = boxSize_val34_c_full_n;
    end else begin
        boxSize_val34_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        boxSize_val34_c_write = 1'b1;
    end else begin
        boxSize_val34_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        crossHairX_val28_c_blk_n = crossHairX_val28_c_full_n;
    end else begin
        crossHairX_val28_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        crossHairX_val28_c_write = 1'b1;
    end else begin
        crossHairX_val28_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        crossHairY_val29_c_blk_n = crossHairY_val29_c_full_n;
    end else begin
        crossHairY_val29_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        crossHairY_val29_c_write = 1'b1;
    end else begin
        crossHairY_val29_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dpDynamicRange_val38_c_blk_n = dpDynamicRange_val38_c_full_n;
    end else begin
        dpDynamicRange_val38_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        dpDynamicRange_val38_c_write = 1'b1;
    end else begin
        dpDynamicRange_val38_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        dpYUVCoef_val39_c_blk_n = dpYUVCoef_val39_c_full_n;
    end else begin
        dpYUVCoef_val39_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        dpYUVCoef_val39_c_write = 1'b1;
    end else begin
        dpYUVCoef_val39_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        fid_in_val12_c_blk_n = fid_in_val12_c_full_n;
    end else begin
        fid_in_val12_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        fid_in_val12_c_write = 1'b1;
    end else begin
        fid_in_val12_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        field_id_val11_c_blk_n = field_id_val11_c_full_n;
    end else begin
        field_id_val11_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        field_id_val11_c_write = 1'b1;
    end else begin
        field_id_val11_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        maskId_val21_c_blk_n = maskId_val21_c_full_n;
    end else begin
        maskId_val21_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        maskId_val21_c_write = 1'b1;
    end else begin
        maskId_val21_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        motionSpeed_val23_c18_blk_n = motionSpeed_val23_c18_full_n;
    end else begin
        motionSpeed_val23_c18_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        motionSpeed_val23_c18_write = 1'b1;
    end else begin
        motionSpeed_val23_c18_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ovrlayId_val20_c_blk_n = ovrlayId_val20_c_full_n;
    end else begin
        ovrlayId_val20_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        ovrlayId_val20_c_write = 1'b1;
    end else begin
        ovrlayId_val20_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruEndX_val15_c_blk_n = passthruEndX_val15_c_full_n;
    end else begin
        passthruEndX_val15_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruEndX_val15_c_write = 1'b1;
    end else begin
        passthruEndX_val15_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruEndY_val16_c_blk_n = passthruEndY_val16_c_full_n;
    end else begin
        passthruEndY_val16_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruEndY_val16_c_write = 1'b1;
    end else begin
        passthruEndY_val16_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruStartX_val13_c_blk_n = passthruStartX_val13_c_full_n;
    end else begin
        passthruStartX_val13_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruStartX_val13_c_write = 1'b1;
    end else begin
        passthruStartX_val13_c_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruStartY_val14_c_blk_n = passthruStartY_val14_c_full_n;
    end else begin
        passthruStartY_val14_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        passthruStartY_val14_c_write = 1'b1;
    end else begin
        passthruStartY_val14_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ZplateHorContDelta_val31_c_din = ZplateHorContDelta_val31;

assign ZplateHorContStart_val30_c_din = ZplateHorContStart_val30;

assign ZplateVerContDelta_val33_c_din = ZplateVerContDelta_val33;

assign ZplateVerContStart_val32_c_din = ZplateVerContStart_val32;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((maskId_val21_c_full_n == 1'b0) | (ovrlayId_val20_c_full_n == 1'b0) | (bckgndId_val19_c_full_n == 1'b0) | (real_start == 1'b0) | (passthruEndY_val16_c_full_n == 1'b0) | (passthruEndX_val15_c_full_n == 1'b0) | (passthruStartY_val14_c_full_n == 1'b0) | (passthruStartX_val13_c_full_n == 1'b0) | (fid_in_val12_c_full_n == 1'b0) | (field_id_val11_c_full_n == 1'b0) | (1'b0 == ZplateVerContDelta_val33_c_full_n) | (1'b0 == ZplateVerContStart_val32_c_full_n) | (1'b0 == ZplateHorContDelta_val31_c_full_n) | (1'b0 == ZplateHorContStart_val30_c_full_n) | (ap_done_reg == 1'b1) | (dpYUVCoef_val39_c_full_n == 1'b0) | (dpDynamicRange_val38_c_full_n == 1'b0) | (boxColorB_val37_c_full_n == 1'b0) | (boxColorG_val36_c_full_n == 1'b0) | (boxColorR_val35_c_full_n == 1'b0) | (boxSize_val34_c_full_n == 1'b0) | (crossHairY_val29_c_full_n == 1'b0) | (crossHairX_val28_c_full_n == 1'b0) | (motionSpeed_val23_c18_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign bckgndId_val19_c_din = bckgndId_val19;

assign boxColorB_val37_c_din = boxColorB_val37;

assign boxColorG_val36_c_din = boxColorG_val36;

assign boxColorR_val35_c_din = boxColorR_val35;

assign boxSize_val34_c_din = boxSize_val34;

assign crossHairX_val28_c_din = crossHairX_val28;

assign crossHairY_val29_c_din = crossHairY_val29;

assign dpDynamicRange_val38_c_din = dpDynamicRange_val38;

assign dpYUVCoef_val39_c_din = dpYUVCoef_val39;

assign fid_in_val12_c_din = fid_in_val12;

assign field_id_val11_c_din = field_id_val11;

assign maskId_val21_c_din = maskId_val21;

assign motionSpeed_val23_c18_din = motionSpeed_val23;

assign ovrlayId_val20_c_din = ovrlayId_val20;

assign passthruEndX_val15_c_din = passthruEndX_val15;

assign passthruEndY_val16_c_din = passthruEndY_val16;

assign passthruStartX_val13_c_din = passthruStartX_val13;

assign passthruStartY_val14_c_din = passthruStartY_val14;

assign start_out = real_start;

endmodule //design_1_v_tpg_0_0_entry_proc
